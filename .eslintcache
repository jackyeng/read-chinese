[{"/Users/Jacky/Documents/GitHub/read-chinese/src/index.js":"1","/Users/Jacky/Documents/GitHub/read-chinese/src/reportWebVitals.js":"2","/Users/Jacky/Documents/GitHub/read-chinese/src/App.js":"3","/Users/Jacky/Documents/GitHub/read-chinese/src/page/Characters.js":"4","/Users/Jacky/Documents/GitHub/read-chinese/src/page/Navbar.js":"5","/Users/Jacky/Documents/GitHub/read-chinese/src/page/Test.js":"6","/Users/Jacky/Documents/GitHub/read-chinese/src/page/Practice.js":"7","/Users/Jacky/Documents/GitHub/read-chinese/src/page/Typer.js":"8","/Users/Jacky/Documents/GitHub/read-chinese/src/page/About.js":"9","/Users/Jacky/Documents/GitHub/read-chinese/src/components/SelectionTable.js":"10","/Users/Jacky/Documents/GitHub/read-chinese/src/components/CharacterTooltip.js":"11","/Users/Jacky/Documents/GitHub/read-chinese/src/components/Groupbar.js":"12","/Users/Jacky/Documents/GitHub/read-chinese/src/components/ReferenceTable.js":"13","/Users/Jacky/Documents/GitHub/read-chinese/src/helpers/chineseAPI.js":"14","/Users/Jacky/Documents/GitHub/read-chinese/src/components/TypeAssist.js":"15","/Users/Jacky/Documents/GitHub/read-chinese/src/components/GroupbarElement.js":"16","/Users/Jacky/Documents/GitHub/read-chinese/src/components/SetElement.js":"17","/Users/Jacky/Documents/GitHub/read-chinese/src/data/chinesedata.js":"18"},{"size":500,"mtime":1608004129061,"results":"19","hashOfConfig":"20"},{"size":362,"mtime":1608004129069,"results":"21","hashOfConfig":"20"},{"size":1042,"mtime":1609685183361,"results":"22","hashOfConfig":"20"},{"size":4358,"mtime":1613646264639,"results":"23","hashOfConfig":"20"},{"size":935,"mtime":1612008016698,"results":"24","hashOfConfig":"20"},{"size":509,"mtime":1611585878761,"results":"25","hashOfConfig":"20"},{"size":5527,"mtime":1612010022143,"results":"26","hashOfConfig":"20"},{"size":6362,"mtime":1614851311151,"results":"27","hashOfConfig":"20"},{"size":808,"mtime":1614851299604,"results":"28","hashOfConfig":"20"},{"size":2521,"mtime":1610118606835,"results":"29","hashOfConfig":"20"},{"size":834,"mtime":1611586248055,"results":"30","hashOfConfig":"20"},{"size":3483,"mtime":1609653659522,"results":"31","hashOfConfig":"20"},{"size":2473,"mtime":1609613986341,"results":"32","hashOfConfig":"20"},{"size":271,"mtime":1610174254072,"results":"33","hashOfConfig":"20"},{"size":4840,"mtime":1612006175137,"results":"34","hashOfConfig":"20"},{"size":2500,"mtime":1609613986386,"results":"35","hashOfConfig":"20"},{"size":2403,"mtime":1609613986406,"results":"36","hashOfConfig":"20"},{"size":180249,"mtime":1612009537990,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"ftj0oy",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"40"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"40"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"40"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"40"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"/Users/Jacky/Documents/GitHub/read-chinese/src/index.js",[],["80","81"],"/Users/Jacky/Documents/GitHub/read-chinese/src/reportWebVitals.js",[],"/Users/Jacky/Documents/GitHub/read-chinese/src/App.js",["82"],"import './App.css';\nimport Test from './page/Test';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport Navbar from './page/Navbar';\nimport Practice from './page/Practice';\nimport Characters from './page/Characters';\nimport Typer from './page/Typer';\nimport About from './page/About';\nimport React from 'react';\nimport axios from 'axios';\n\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        \n        <Router>\n          <div className=\"App-navbar\">\n            <Navbar  fixed=\"top\"/>\n          </div>\n          <br/>\n          <div className=\"App-page\">\n            <Route path=\"/practice\" component={Practice}/>\n            <Route path=\"/test\" component={Test}/>\n            <Route path=\"/typer\" component={Typer}/>\n            <Route path=\"/characters\" component={Characters}/>\n            <Route path=\"/about\" component={About}/>\n          </div>\n\n        </Router>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/Jacky/Documents/GitHub/read-chinese/src/page/Characters.js",["83","84"],"import React from \"react\";\nimport CharacterTooltip from \"../components/CharacterTooltip\";\nimport { chineseAPI } from \"../helpers/chineseAPI\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ArrowBackIosIcon from \"@material-ui/icons/ArrowBackIos\";\nimport ArrowForwardIosIcon from \"@material-ui/icons/ArrowForwardIos\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport clsx from \"clsx\";\nimport {chineseData} from \"./../data/chinesedata\";\n\nconst useStyles = makeStyles((theme) => ({\n  transparent: {\n    backgroundColor: \"transparent\",\n  },\n  container: {\n    marginLeft: -40,\n    marginTop: 150,\n    width: 900,\n    height: 450,\n  },\n  display: {\n    marginTop: 20,\n    width: 700,\n    height: 350,\n  },\n  title: {\n    width: 500,\n    height: 50,\n    backgroundColor: \"transparent \",\n  },\n  leftButton: {\n    color: \"#949494\",\n    width: 50,\n    height: 50,\n    backgroundColor: \"transparent \",\n  },\n  rightButton: {\n    color: \"#949494\",\n    width: 50,\n    height: 50,\n    backgroundColor: \"transparent \",\n  },\n  center: {\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  loading: {\n    color: \"red\",\n  },\n  titleColor: {\n    fontSize: \"20px\",\n    color: \"#949494\",\n    fontFamily: \"Quicksand\",\n  },\n}));\n\nexport default function Characters() {\n  const [tooltip, setTooltip] = React.useState([]);\n  const [tooltipGroup, setTooltipGroup] = React.useState([]);\n  const [characterTooltip, setCharacterTooltip] = React.useState([]);\n  const [page, setPage] = React.useState(0);\n  const classes = useStyles();\n\n  /*handle previous button, move to the previous character groups*/\n  const previous = () => {\n    if (page - 1 > -1) {\n      setPage(page - 1);\n      setCharacterTooltip(tooltipGroup[page - 1]);\n    }\n  };\n\n  /*handle next button, move to the next character groups*/\n  const next = () => {\n    if (page + 1 < tooltipGroup.length) {\n      setPage(page + 1);\n      setCharacterTooltip(tooltipGroup[page + 1]);\n    }\n  };\n\n  /*calls Chinese characters from database*/\n  React.useEffect(() => {\n    setTooltip(chineseData);\n  }, []);\n\n  React.useEffect(() => {\n    if (tooltip.length > 0) {\n      const result = new Array(tooltip.length)\n        .fill(0)\n        .map((_, index) => <CharacterTooltip chinese={tooltip[index]} />);\n      const result1 = new Array(Math.ceil(result.length / 50))\n        .fill()\n        .map((_) => result.splice(0, 50));\n      setTooltipGroup(result1);\n      setCharacterTooltip(result1[page]);\n    }\n  }, [tooltip]);\n\n  return (\n    <div>\n      <Grid\n        item\n        className={clsx(classes.container, classes.center, classes.transparent)}\n      >\n        {/*Parent Grid*/}\n        <Grid \n          item\n          container\n          direction=\"column\"\n          spacing={2}\n          className={classes.center}\n        >\n          {/*Grid container for next/previous buttons and current group display*/}\n          <Grid item className={classes.title}> \n            <Grid \n              item\n              xs\n              container\n              direction=\"row\"\n              spacing={1}\n              className={classes.center}\n            >\n              <Grid item className={classes.leftButton}>\n                <IconButton className=\"no-frame\" onClick={() => previous()}>\n                  <ArrowBackIosIcon></ArrowBackIosIcon>\n                </IconButton>\n              </Grid>\n              <div className={classes.titleColor}>\n                {\"Character Group \" + (page + 1).toString()}\n              </div>\n              <Grid item className={classes.rightButton}>\n                <IconButton className=\"no-frame\" onClick={() => next()}>\n                  <ArrowForwardIosIcon></ArrowForwardIosIcon>\n                </IconButton>\n              </Grid>\n            </Grid>\n          </Grid>\n          {/*Grid for characters display*/}\n          <Grid \n            item\n            className={clsx(\n              classes.display,\n              classes.center,\n              classes.transparent\n            )}\n          >\n            {characterTooltip.length > 0 ? (\n              characterTooltip\n            ) : (\n              <CircularProgress className={classes.loading} />\n            )}\n          </Grid>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n","/Users/Jacky/Documents/GitHub/read-chinese/src/page/Navbar.js",[],"/Users/Jacky/Documents/GitHub/read-chinese/src/page/Test.js",["85"],"import React from \"react\";\nimport SelectionTable from \"./../components/SelectionTable\";\nimport axios from \"axios\";\n\nexport default function Test() {\n  const [chinese, setChinese] = React.useState({ chinese: [] });\n\n  React.useEffect(() => {\n    axios\n      .get(\"http://localhost:5000/chinese/\")\n      .then((response) => {\n        setChinese([response.data]);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }, []);\n\n  React.useEffect(() => {}, [chinese]);\n  return <div></div>;\n}\n","/Users/Jacky/Documents/GitHub/read-chinese/src/page/Practice.js",["86"],"import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport axios from \"axios\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Groupbar from \"../components/Groupbar\";\nimport TypeAssist from \"../components/TypeAssist\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Button from \"@material-ui/core/Button\";\nimport ReferenceTable from \"./../components/ReferenceTable\";\nimport {chineseData} from \"./../data/chinesedata\";\n\nconst useStyles = makeStyles((theme) => ({\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 1,\n    color: \"fff\",\n    backgroundColor: \"rgba(0, 0, 0, 0.8)\",\n  },\n  groupBar: {\n    flexDirection: \"column\",\n    marginLeft: 0,\n    marginTop: 150,\n    width: 1000,\n    height: 500,\n    backgroundColor: \"transparent\",\n  },\n  paper: {\n    height: 140,\n    width: 140,\n  },\n  displayGroup: {\n    marginLeft: 0,\n    width: 400,\n    height: 400,\n    backgroundColor: \"transparent\",\n  },\n  sideBar: {\n    width: 180,\n    height: 500,\n    backgroundColor: \"transparent\",\n  },\n  practice: {\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginLeft: -180,\n    width: 550,\n    height: 350,\n    backgroundColor: \"transparent\",\n  },\n  displaySize: {\n    fontSize: 30,\n  },\n  button: {\n    fontSize: 11,\n    color: \"#949494\",\n    borderColor: \"#e33a07\",\n    \"&:hover\": {\n      borderColor: \"#949494\",\n      color: \"#e33a07\",\n    },\n    \"&::after\": {\n      borderColor: \"#e33a07\",\n    },\n  },\n  instruction: {\n    marginTop: -100,\n    color: \"#949494\",\n    fontFamily:\"Quicksand\",\n  },\n  progressBar: {\n    marginLeft: 60,\n    marginTop: 120,\n    color: \"red\",\n  },\n}));\n\nexport default function Practice() {\n  const classes = useStyles();\n  const [chinese, setChinese] = React.useState({ chinese: [] });\n  const [chineseGroup, setChineseGroup] = React.useState([]);\n  const [displayGroup, setDisplayGroup] = React.useState([]);\n  const [interactGroup, setInteractGroup] = React.useState([]);\n  const [referenceGroup, setReferenceGroup] = React.useState([]);\n\n  const [open, setOpen] = React.useState(false);\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n  const handleToggle = () => {\n    setOpen(!open);\n  };\n\n  /**\n   * Group Chinese characters called from database into appropriate structure for the web app\n   * @param {array} chinese   array containing all Chinese characters called from database\n   */\n  const GroupCharacters = (chinese) => {\n    //Splice array into \"Group\" of arrays of 50 Chinese characters\n    const result = new Array(Math.ceil(chinese[0].length / 50))\n      .fill()\n      .map((_) => chinese[0].splice(0, 50));\n\n    //Splice each of the \"Group\" into further 5 \"Set\" of arrays of 10 Chinese characters\n    const groupResult = result.map((_, index) =>\n      new Array(Math.ceil(result[index].length / 10))\n        .fill()\n        .map((_) => result[index].splice(0, 10))\n    );\n    setChineseGroup(groupResult);\n  };\n\n  /**\n   * Display and load the selected \"Set\" of Chinese characters for user to practice\n   * @param {number} group   selected \"Group\" \n   * @param {number} set     selected \"Set\"\n   */\n  const selectSet = (group = 0, set = 0) => {\n    if (chineseGroup.length !== 0) {\n      const temp = [];\n      for (var i = 0; i < chineseGroup[group][set].length; i++) {\n        temp.push(chineseGroup[group][set][i].character + \" \");\n      }\n      setDisplayGroup(temp);\n      setReferenceGroup(chineseGroup[group][set]);\n      setInteractGroup(JSON.parse(JSON.stringify(chineseGroup[group][set])));\n    }\n  };\n\n  //Calls Chinese characters from database\n  React.useEffect(() => {\n    /*axios\n      .get(\"http://localhost:5000/chinese/\")\n      .then((response) => {\n        setChinese([response.data]);\n      })\n      .catch((error) => {\n        console.log(error);\n      });*/\n      setChinese([chineseData]);\n  }, []);\n\n  React.useEffect(() => {\n    if (chinese.length) {\n      GroupCharacters(chinese);\n      console.log(chinese);\n    }\n  }, [chinese]);\n\n  return (\n    <div>\n      <Grid container className={classes.groupBar} spacing={2}>\n        <Grid container className={classes.sideBar} spacing={2}>\n          {chineseGroup.length !== 0 ? (\n            <Groupbar selectSet={selectSet} setDisplayGroup={setDisplayGroup} />\n          ) : (\n            <CircularProgress className={classes.progressBar} />\n          )}\n        </Grid>\n        <Grid container className={classes.practice} spacing={2}>\n          {displayGroup.length === 0 && (\n            <div className={classes.instruction}>\n              {\" \"}\n              Select a group and set to start practicing{\" \"}\n            </div>\n          )}\n          {displayGroup.length !== 0 && (\n            <div className={classes.displaySize}>\n              {displayGroup} <br />\n              <Button\n                className={classes.button}\n                variant=\"outlined\"\n                color=\"primary\"\n                onClick={handleToggle}\n              >\n                Show pinyin/meaning\n              </Button>\n              <Backdrop\n                className={classes.backdrop}\n                open={open}\n                onClick={handleClose}\n              >\n                <ReferenceTable chinese={referenceGroup} />\n              </Backdrop>\n              <br />\n            </div>\n          )}\n          {displayGroup.length !== 0 && (\n            <TypeAssist practice={{ chinese: interactGroup }} feedback={open}/>\n          )}\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n","/Users/Jacky/Documents/GitHub/read-chinese/src/page/Typer.js",["87","88","89"],"/Users/Jacky/Documents/GitHub/read-chinese/src/page/About.js",[],"/Users/Jacky/Documents/GitHub/read-chinese/src/components/SelectionTable.js",[],"/Users/Jacky/Documents/GitHub/read-chinese/src/components/CharacterTooltip.js",["90"],"import React from \"react\";\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\n\nconst LightTooltip = withStyles((theme) => ({\n  tooltip: {\n    backgroundColor: \"#656565\",\n    color: \"#e5e5e5\",\n    boxShadow: theme.shadows[1],\n    fontSize: 20,\n  },\n}))(Tooltip);\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    size: 20,\n  },\n}));\n\nexport default function CustomizedTooltips(props) {\n  const { chinese } = props;\n  return (\n    <LightTooltip\n      title={\n        <div>\n          {\"pinyin: \" + chinese.pinyin} <br /> {\"meaning: \" + chinese.meaning}\n        </div>\n      }\n    >\n      <Button style={{ fontSize: \"25px\", color: \"#949494\" }}>\n        {chinese.character}\n      </Button>\n    </LightTooltip>\n  );\n}\n","/Users/Jacky/Documents/GitHub/read-chinese/src/components/Groupbar.js",[],"/Users/Jacky/Documents/GitHub/read-chinese/src/components/ReferenceTable.js",[],"/Users/Jacky/Documents/GitHub/read-chinese/src/helpers/chineseAPI.js",[],"/Users/Jacky/Documents/GitHub/read-chinese/src/components/TypeAssist.js",[],"/Users/Jacky/Documents/GitHub/read-chinese/src/components/GroupbarElement.js",[],"/Users/Jacky/Documents/GitHub/read-chinese/src/components/SetElement.js",[],"/Users/Jacky/Documents/GitHub/read-chinese/src/data/chinesedata.js",[],{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","severity":1,"message":"96","line":11,"column":8,"nodeType":"97","messageId":"98","endLine":11,"endColumn":13},{"ruleId":"95","severity":1,"message":"99","line":3,"column":10,"nodeType":"97","messageId":"98","endLine":3,"endColumn":20},{"ruleId":"100","severity":1,"message":"101","line":98,"column":6,"nodeType":"102","endLine":98,"endColumn":15,"suggestions":"103"},{"ruleId":"95","severity":1,"message":"104","line":2,"column":8,"nodeType":"97","messageId":"98","endLine":2,"endColumn":22},{"ruleId":"95","severity":1,"message":"96","line":3,"column":8,"nodeType":"97","messageId":"98","endLine":3,"endColumn":13},{"ruleId":"95","severity":1,"message":"96","line":10,"column":8,"nodeType":"97","messageId":"98","endLine":10,"endColumn":13},{"ruleId":"100","severity":1,"message":"105","line":147,"column":6,"nodeType":"102","endLine":147,"endColumn":18,"suggestions":"106"},{"ruleId":"100","severity":1,"message":"107","line":188,"column":6,"nodeType":"102","endLine":188,"endColumn":15,"suggestions":"108"},{"ruleId":"95","severity":1,"message":"109","line":15,"column":7,"nodeType":"97","messageId":"98","endLine":15,"endColumn":16},"no-native-reassign",["110"],"no-negated-in-lhs",["111"],"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","'chineseAPI' is defined but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'page'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setCharacterTooltip' needs the current value of 'page'.","ArrayExpression",["112"],"'SelectionTable' is defined but never used.","React Hook useEffect has a missing dependency: 'chinese.chinese'. Either include it or remove the dependency array.",["113"],"React Hook React.useEffect has a missing dependency: 'organiseDisplay'. Either include it or remove the dependency array.",["114"],"'useStyles' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"115","fix":"116"},{"desc":"117","fix":"118"},{"desc":"119","fix":"120"},"Update the dependencies array to be: [page, tooltip]",{"range":"121","text":"122"},"Update the dependencies array to be: [chinese.chinese, inputValue]",{"range":"123","text":"124"},"Update the dependencies array to be: [divList, organiseDisplay]",{"range":"125","text":"126"},[2589,2598],"[page, tooltip]",[3622,3634],"[chinese.chinese, inputValue]",[4683,4692],"[divList, organiseDisplay]"]