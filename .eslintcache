[{"C:\\Users\\User\\Documents\\GitHub\\read-chinese\\src\\index.js":"1","C:\\Users\\User\\Documents\\GitHub\\read-chinese\\src\\reportWebVitals.js":"2","C:\\Users\\User\\Documents\\GitHub\\read-chinese\\src\\App.js":"3","C:\\Users\\User\\Documents\\GitHub\\read-chinese\\src\\page\\Practice.js":"4","C:\\Users\\User\\Documents\\GitHub\\read-chinese\\src\\page\\Test.js":"5","C:\\Users\\User\\Documents\\GitHub\\read-chinese\\src\\page\\Characters.js":"6","C:\\Users\\User\\Documents\\GitHub\\read-chinese\\src\\page\\Navbar.js":"7","C:\\Users\\User\\Documents\\GitHub\\read-chinese\\src\\page\\About.js":"8","C:\\Users\\User\\Documents\\GitHub\\read-chinese\\src\\page\\Typer.js":"9","C:\\Users\\User\\Documents\\GitHub\\read-chinese\\src\\components\\Groupbar.js":"10","C:\\Users\\User\\Documents\\GitHub\\read-chinese\\src\\components\\CharacterTooltip.js":"11","C:\\Users\\User\\Documents\\GitHub\\read-chinese\\src\\components\\TypeAssist.js":"12","C:\\Users\\User\\Documents\\GitHub\\read-chinese\\src\\components\\ReferenceTable.js":"13","C:\\Users\\User\\Documents\\GitHub\\read-chinese\\src\\components\\SelectionTable.js":"14","C:\\Users\\User\\Documents\\GitHub\\read-chinese\\src\\data\\chinesedata.js":"15","C:\\Users\\User\\Documents\\GitHub\\read-chinese\\src\\helpers\\chineseAPI.js":"16","C:\\Users\\User\\Documents\\GitHub\\read-chinese\\src\\components\\GroupbarElement.js":"17","C:\\Users\\User\\Documents\\GitHub\\read-chinese\\src\\components\\SetElement.js":"18"},{"size":517,"mtime":1633789647582,"results":"19","hashOfConfig":"20"},{"size":375,"mtime":1633789647589,"results":"21","hashOfConfig":"20"},{"size":1082,"mtime":1633789647495,"results":"22","hashOfConfig":"20"},{"size":5722,"mtime":1633789647586,"results":"23","hashOfConfig":"20"},{"size":530,"mtime":1633789647587,"results":"24","hashOfConfig":"20"},{"size":4516,"mtime":1633789647584,"results":"25","hashOfConfig":"20"},{"size":965,"mtime":1633789647585,"results":"26","hashOfConfig":"20"},{"size":864,"mtime":1633789647583,"results":"27","hashOfConfig":"20"},{"size":6599,"mtime":1633789647588,"results":"28","hashOfConfig":"20"},{"size":3602,"mtime":1633789647497,"results":"29","hashOfConfig":"20"},{"size":870,"mtime":1633789647496,"results":"30","hashOfConfig":"20"},{"size":5429,"mtime":1633800136780,"results":"31","hashOfConfig":"20"},{"size":2558,"mtime":1633789647499,"results":"32","hashOfConfig":"20"},{"size":2608,"mtime":1633789647499,"results":"33","hashOfConfig":"20"},{"size":192247,"mtime":1633789647505,"results":"34","hashOfConfig":"20"},{"size":284,"mtime":1633789647580,"results":"35","hashOfConfig":"20"},{"size":2587,"mtime":1633789647498,"results":"36","hashOfConfig":"20"},{"size":2476,"mtime":1633789647500,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"xcjn40",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"40"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"40"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"40"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"C:\\Users\\User\\Documents\\GitHub\\read-chinese\\src\\index.js",[],["81","82"],"C:\\Users\\User\\Documents\\GitHub\\read-chinese\\src\\reportWebVitals.js",[],"C:\\Users\\User\\Documents\\GitHub\\read-chinese\\src\\App.js",["83"],"import './App.css';\r\nimport Test from './page/Test';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\r\nimport Navbar from './page/Navbar';\r\nimport Practice from './page/Practice';\r\nimport Characters from './page/Characters';\r\nimport Typer from './page/Typer';\r\nimport About from './page/About';\r\nimport React from 'react';\r\nimport axios from 'axios';\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        \r\n        <Router>\r\n          <div className=\"App-navbar\">\r\n            <Navbar  fixed=\"top\"/>\r\n          </div>\r\n          <br/>\r\n          <div className=\"App-page\">\r\n            <Route path=\"/practice\" component={Practice}/>\r\n            <Route path=\"/test\" component={Test}/>\r\n            <Route path=\"/typer\" component={Typer}/>\r\n            <Route path=\"/characters\" component={Characters}/>\r\n            <Route path=\"/about\" component={About}/>\r\n          </div>\r\n\r\n        </Router>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\User\\Documents\\GitHub\\read-chinese\\src\\page\\Practice.js",["84"],"import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport axios from \"axios\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Groupbar from \"../components/Groupbar\";\r\nimport TypeAssist from \"../components/TypeAssist\";\r\nimport Backdrop from \"@material-ui/core/Backdrop\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport ReferenceTable from \"./../components/ReferenceTable\";\r\nimport {chineseData} from \"./../data/chinesedata\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    color: \"fff\",\r\n    backgroundColor: \"rgba(0, 0, 0, 0.8)\",\r\n  },\r\n  groupBar: {\r\n    flexDirection: \"column\",\r\n    marginLeft: 0,\r\n    marginTop: 150,\r\n    width: 1000,\r\n    height: 500,\r\n    backgroundColor: \"transparent\",\r\n  },\r\n  paper: {\r\n    height: 140,\r\n    width: 140,\r\n  },\r\n  displayGroup: {\r\n    marginLeft: 0,\r\n    width: 400,\r\n    height: 400,\r\n    backgroundColor: \"transparent\",\r\n  },\r\n  sideBar: {\r\n    width: 180,\r\n    height: 500,\r\n    backgroundColor: \"transparent\",\r\n  },\r\n  practice: {\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    marginLeft: -180,\r\n    width: 550,\r\n    height: 350,\r\n    backgroundColor: \"transparent\",\r\n  },\r\n  displaySize: {\r\n    fontSize: 30,\r\n  },\r\n  button: {\r\n    fontSize: 11,\r\n    color: \"#949494\",\r\n    borderColor: \"#e33a07\",\r\n    \"&:hover\": {\r\n      borderColor: \"#949494\",\r\n      color: \"#e33a07\",\r\n    },\r\n    \"&::after\": {\r\n      borderColor: \"#e33a07\",\r\n    },\r\n  },\r\n  instruction: {\r\n    marginTop: -100,\r\n    color: \"#949494\",\r\n    fontFamily:\"Quicksand\",\r\n  },\r\n  progressBar: {\r\n    marginLeft: 60,\r\n    marginTop: 120,\r\n    color: \"red\",\r\n  },\r\n}));\r\n\r\nexport default function Practice() {\r\n  const classes = useStyles();\r\n  const [chinese, setChinese] = React.useState({ chinese: [] });\r\n  const [chineseGroup, setChineseGroup] = React.useState([]);\r\n  const [displayGroup, setDisplayGroup] = React.useState([]);\r\n  const [interactGroup, setInteractGroup] = React.useState([]);\r\n  const [referenceGroup, setReferenceGroup] = React.useState([]);\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n  const handleToggle = () => {\r\n    setOpen(!open);\r\n  };\r\n\r\n  /**\r\n   * Group Chinese characters called from database into appropriate structure for the web app\r\n   * @param {array} chinese   array containing all Chinese characters called from database\r\n   */\r\n  const GroupCharacters = (chinese) => {\r\n    //Splice array into \"Group\" of arrays of 50 Chinese characters\r\n    const result = new Array(Math.ceil(chinese[0].length / 50))\r\n      .fill()\r\n      .map((_) => chinese[0].splice(0, 50));\r\n\r\n    //Splice each of the \"Group\" into further 5 \"Set\" of arrays of 10 Chinese characters\r\n    const groupResult = result.map((_, index) =>\r\n      new Array(Math.ceil(result[index].length / 10))\r\n        .fill()\r\n        .map((_) => result[index].splice(0, 10))\r\n    );\r\n    setChineseGroup(groupResult);\r\n  };\r\n\r\n  /**\r\n   * Display and load the selected \"Set\" of Chinese characters for user to practice\r\n   * @param {number} group   selected \"Group\" \r\n   * @param {number} set     selected \"Set\"\r\n   */\r\n  const selectSet = (group = 0, set = 0) => {\r\n    if (chineseGroup.length !== 0) {\r\n      const temp = [];\r\n      for (var i = 0; i < chineseGroup[group][set].length; i++) {\r\n        temp.push(chineseGroup[group][set][i].character + \" \");\r\n      }\r\n      setDisplayGroup(temp);\r\n      setReferenceGroup(chineseGroup[group][set]);\r\n      setInteractGroup(JSON.parse(JSON.stringify(chineseGroup[group][set])));\r\n    }\r\n  };\r\n\r\n  //Calls Chinese characters from database\r\n  React.useEffect(() => {\r\n    /*axios\r\n      .get(\"http://localhost:5000/chinese/\")\r\n      .then((response) => {\r\n        setChinese([response.data]);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });*/\r\n      setChinese([chineseData]);\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    if (chinese.length) {\r\n      GroupCharacters(chinese);\r\n      console.log(chinese);\r\n    }\r\n  }, [chinese]);\r\n\r\n  return (\r\n    <div>\r\n      <Grid container className={classes.groupBar} spacing={2}>\r\n        <Grid container className={classes.sideBar} spacing={2}>\r\n          {chineseGroup.length !== 0 ? (\r\n            <Groupbar selectSet={selectSet} setDisplayGroup={setDisplayGroup} />\r\n          ) : (\r\n            <CircularProgress className={classes.progressBar} />\r\n          )}\r\n        </Grid>\r\n        <Grid container className={classes.practice} spacing={2}>\r\n          {displayGroup.length === 0 && (\r\n            <div className={classes.instruction}>\r\n              {\" \"}\r\n              Select a group and set to start practicing{\" \"}\r\n            </div>\r\n          )}\r\n          {displayGroup.length !== 0 && (\r\n            <div className={classes.displaySize}>\r\n              {displayGroup} <br />\r\n              <Button\r\n                className={classes.button}\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                onClick={handleToggle}\r\n              >\r\n                Show pinyin/meaning\r\n              </Button>\r\n              <Backdrop\r\n                className={classes.backdrop}\r\n                open={open}\r\n                onClick={handleClose}\r\n              >\r\n                <ReferenceTable chinese={referenceGroup} />\r\n              </Backdrop>\r\n              <br />\r\n            </div>\r\n          )}\r\n          {displayGroup.length !== 0 && (\r\n            <TypeAssist practice={{ chinese: interactGroup }} feedback={open}/>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\User\\Documents\\GitHub\\read-chinese\\src\\page\\Test.js",["85"],"import React from \"react\";\r\nimport SelectionTable from \"./../components/SelectionTable\";\r\nimport axios from \"axios\";\r\n\r\nexport default function Test() {\r\n  const [chinese, setChinese] = React.useState({ chinese: [] });\r\n\r\n  React.useEffect(() => {\r\n    axios\r\n      .get(\"http://localhost:5000/chinese/\")\r\n      .then((response) => {\r\n        setChinese([response.data]);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }, []);\r\n\r\n  React.useEffect(() => {}, [chinese]);\r\n  return <div></div>;\r\n}\r\n","C:\\Users\\User\\Documents\\GitHub\\read-chinese\\src\\page\\Characters.js",["86","87"],"import React from \"react\";\r\nimport CharacterTooltip from \"../components/CharacterTooltip\";\r\nimport { chineseAPI } from \"../helpers/chineseAPI\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport ArrowBackIosIcon from \"@material-ui/icons/ArrowBackIos\";\r\nimport ArrowForwardIosIcon from \"@material-ui/icons/ArrowForwardIos\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport clsx from \"clsx\";\r\nimport {chineseData} from \"./../data/chinesedata\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  transparent: {\r\n    backgroundColor: \"transparent\",\r\n  },\r\n  container: {\r\n    marginLeft: -40,\r\n    marginTop: 150,\r\n    width: 900,\r\n    height: 450,\r\n  },\r\n  display: {\r\n    marginTop: 20,\r\n    width: 700,\r\n    height: 350,\r\n  },\r\n  title: {\r\n    width: 500,\r\n    height: 50,\r\n    backgroundColor: \"transparent \",\r\n  },\r\n  leftButton: {\r\n    color: \"#949494\",\r\n    width: 50,\r\n    height: 50,\r\n    backgroundColor: \"transparent \",\r\n  },\r\n  rightButton: {\r\n    color: \"#949494\",\r\n    width: 50,\r\n    height: 50,\r\n    backgroundColor: \"transparent \",\r\n  },\r\n  center: {\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  loading: {\r\n    color: \"red\",\r\n  },\r\n  titleColor: {\r\n    fontSize: \"20px\",\r\n    color: \"#949494\",\r\n    fontFamily: \"Quicksand\",\r\n  },\r\n}));\r\n\r\nexport default function Characters() {\r\n  const [tooltip, setTooltip] = React.useState([]);\r\n  const [tooltipGroup, setTooltipGroup] = React.useState([]);\r\n  const [characterTooltip, setCharacterTooltip] = React.useState([]);\r\n  const [page, setPage] = React.useState(0);\r\n  const classes = useStyles();\r\n\r\n  /*handle previous button, move to the previous character groups*/\r\n  const previous = () => {\r\n    if (page - 1 > -1) {\r\n      setPage(page - 1);\r\n      setCharacterTooltip(tooltipGroup[page - 1]);\r\n    }\r\n  };\r\n\r\n  /*handle next button, move to the next character groups*/\r\n  const next = () => {\r\n    if (page + 1 < tooltipGroup.length) {\r\n      setPage(page + 1);\r\n      setCharacterTooltip(tooltipGroup[page + 1]);\r\n    }\r\n  };\r\n\r\n  /*calls Chinese characters from database*/\r\n  React.useEffect(() => {\r\n    setTooltip(chineseData);\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    if (tooltip.length > 0) {\r\n      const result = new Array(tooltip.length)\r\n        .fill(0)\r\n        .map((_, index) => <CharacterTooltip chinese={tooltip[index]} />);\r\n      const result1 = new Array(Math.ceil(result.length / 50))\r\n        .fill()\r\n        .map((_) => result.splice(0, 50));\r\n      setTooltipGroup(result1);\r\n      setCharacterTooltip(result1[page]);\r\n    }\r\n  }, [tooltip]);\r\n\r\n  return (\r\n    <div>\r\n      <Grid\r\n        item\r\n        className={clsx(classes.container, classes.center, classes.transparent)}\r\n      >\r\n        {/*Parent Grid*/}\r\n        <Grid \r\n          item\r\n          container\r\n          direction=\"column\"\r\n          spacing={2}\r\n          className={classes.center}\r\n        >\r\n          {/*Grid container for next/previous buttons and current group display*/}\r\n          <Grid item className={classes.title}> \r\n            <Grid \r\n              item\r\n              xs\r\n              container\r\n              direction=\"row\"\r\n              spacing={1}\r\n              className={classes.center}\r\n            >\r\n              <Grid item className={classes.leftButton}>\r\n                <IconButton className=\"no-frame\" onClick={() => previous()}>\r\n                  <ArrowBackIosIcon></ArrowBackIosIcon>\r\n                </IconButton>\r\n              </Grid>\r\n              <div className={classes.titleColor}>\r\n                {\"Character Group \" + (page + 1).toString()}\r\n              </div>\r\n              <Grid item className={classes.rightButton}>\r\n                <IconButton className=\"no-frame\" onClick={() => next()}>\r\n                  <ArrowForwardIosIcon></ArrowForwardIosIcon>\r\n                </IconButton>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          {/*Grid for characters display*/}\r\n          <Grid \r\n            item\r\n            className={clsx(\r\n              classes.display,\r\n              classes.center,\r\n              classes.transparent\r\n            )}\r\n          >\r\n            {characterTooltip.length > 0 ? (\r\n              characterTooltip\r\n            ) : (\r\n              <CircularProgress className={classes.loading} />\r\n            )}\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\User\\Documents\\GitHub\\read-chinese\\src\\page\\Navbar.js",[],"C:\\Users\\User\\Documents\\GitHub\\read-chinese\\src\\page\\About.js",[],"C:\\Users\\User\\Documents\\GitHub\\read-chinese\\src\\page\\Typer.js",["88","89","90"],"import React, { useEffect } from \"react\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport {\r\n  makeStyles,\r\n  ThemeProvider,\r\n  createMuiTheme,\r\n} from \"@material-ui/core/styles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport axios from \"axios\";\r\nimport { red } from \"@material-ui/core/colors\";\r\nimport \"./../index.css\";\r\nimport BackspaceIcon from \"@material-ui/icons/Backspace\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport {chineseData} from \"./../data/chinesedata\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n      width: \"5\",\r\n    },\r\n  },\r\n  alertRoot: {\r\n    width: \"100%\",\r\n    \"& > * + *\": {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n  },\r\n  TextField: {\r\n    color: \"white\",\r\n    fontSize: \"18px\",\r\n  },\r\n  underline: {\r\n    color: \"red\",\r\n    \"&::after\": {\r\n      border: \"2px solid red\",\r\n    },\r\n  },\r\n  root2: {\r\n    flexGrow: 1,\r\n    fontSize: 15,\r\n    marginTop: 40,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(1),\r\n    textAlign: \"center\",\r\n    color: \"white\",\r\n    backgroundColor: \"transparent\",\r\n    boxShadow: \"none\",\r\n    justify: \"center\",\r\n    height: 194,\r\n  },\r\n  control: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: red,\r\n  },\r\n});\r\n\r\nexport default function Test() {\r\n  const classes = useStyles();\r\n\r\n  const [selectedCharacter, setSelectedCharacter] = React.useState(0);\r\n  const [inputValue, setInputValue] = React.useState(\"\");\r\n  const [divList, setDivList] = React.useState([]);\r\n  const [selectList, setSelectList] = React.useState([]);\r\n  const [chinese, setChinese] = React.useState({ chinese: [] });\r\n  const [result, setResult] = React.useState(\"\");\r\n  \r\n  //Update value of input text field\r\n  const handleChange = (e) => {\r\n    e.preventDefault();\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  function isNumber(n) {\r\n    return !isNaN(parseFloat(n)) && !isNaN(n - 0);\r\n  }\r\n\r\n  //Update typed Chinese characters by adding the selected character\r\n  const handleResult = (e) => {\r\n    if (e < divList.length) {\r\n      setResult(result + selectList[e]);\r\n      setInputValue(\"\"); //Clear TextField\r\n    }\r\n  };\r\n\r\n  //Clear typed Chinese characters\r\n  const handleClear = () => {\r\n    setResult(\"\");\r\n  };\r\n\r\n  //Handle deletion of typed Chinese characters\r\n  const handleDelete = () => {\r\n    setResult(result.slice(0, -1));\r\n  };\r\n\r\n  //Checks user input when any key is pressed \r\n  const handleKeyDown = (e) => {\r\n    if (isNumber(String.fromCharCode(e.keyCode)) && divList.length > 0) {\r\n      handleResult(e.keyCode - 48);\r\n    }\r\n    if (e.keyCode === 13) {\r\n      e.preventDefault();\r\n\r\n      setSelectedCharacter(\r\n        selectedCharacter + 1 < chinese.chinese.length\r\n          ? selectedCharacter + 1\r\n          : 0\r\n      );\r\n      setInputValue(\"\"); //Clear TextField\r\n      setDivList([]); //Clear Chinese characters selection options\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (Number(inputValue) || inputValue === \"0\") {\r\n      setInputValue(\"\");\r\n    }\r\n\r\n    if (inputValue) {\r\n      const filtered = chinese.chinese.filter(\r\n        (el) => el.pinyinWithoutTone === inputValue\r\n      );\r\n      const divList = [];\r\n      const selectList = [];\r\n      for (var i = 0; i < filtered.length; i++) {\r\n        divList.push(\r\n          <div className=\"result\">\r\n            {String(i) +\r\n              \" - \" +\r\n              (filtered[i].character + \": \" + filtered[i].meaning)}\r\n          </div>\r\n        );\r\n\r\n        selectList.push(filtered[i].character);\r\n      }\r\n      setDivList(divList);\r\n      setSelectList(selectList);\r\n    }\r\n  }, [inputValue]);\r\n\r\n  const [display, setDisplay] = React.useState(\r\n    <Paper className={classes.paper} />\r\n  );\r\n  \r\n  // Display options in a nicely formatted n columns x 6 rows \r\n  const organiseDisplay = () => {\r\n    setDisplay(<Paper className={classes.paper} />);\r\n    if (divList.length > 0) {\r\n      var display = [];\r\n      var temp = [...divList];\r\n      const result = new Array(Math.ceil(temp.length / 6))\r\n        .fill()\r\n        .map((_) => temp.splice(0, 6));\r\n\r\n      for (var i = 0; i < Math.ceil(divList.length / 6); i++) {\r\n        display.push(\r\n          <Grid key={i} item>\r\n            <Paper className={classes.paper}>{result[i]}</Paper>\r\n          </Grid>\r\n        );\r\n      }\r\n      setDisplay(display);\r\n    }\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    /*axios\r\n      .get(\"http://localhost:5000/chinese/\")\r\n      .then((response) => {\r\n        setChinese({ chinese: response.data });\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });*/\r\n      setChinese({chinese: chineseData});\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    organiseDisplay();\r\n  }, [divList]);\r\n\r\n  return (\r\n    <div>\r\n      <br/><br/><br/>\r\n      {/* Display list of Chinese characters corresponding to user's input */}\r\n      <Grid container className={classes.root2} spacing={2}>\r\n        <Grid item xs={12}>\r\n          <Grid container justify=\"center\" spacing={2}>\r\n            {display}\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* Handles user input and deletion/clearing of typed Chinese characters */}\r\n      <form className={classes.root} noValidate autoComplete=\"off\">\r\n        <ThemeProvider theme={theme}>\r\n            <TextField\r\n              value={inputValue}\r\n              id=\"standard-basic\"\r\n              onChange={handleChange}\r\n              onKeyDown={handleKeyDown}\r\n              label=\"\"\r\n              inputProps={{\r\n                underline: classes.underline,\r\n                className: classes.TextField,\r\n                min: 0,\r\n                style: { textAlign: \"center\" },\r\n              }}\r\n            />\r\n        </ThemeProvider>\r\n      </form>\r\n      <IconButton className=\"no-frame\" onClick={() => handleDelete()}>\r\n        <BackspaceIcon />\r\n      </IconButton>\r\n      <IconButton className=\"no-frame\" onClick={() => handleClear()}>\r\n        <DeleteIcon />\r\n      </IconButton>\r\n\r\n      {/* Display typed Chinese characters */}\r\n      <div className=\"result2\">{result}</div>\r\n      <div className=\"instruction\">\r\n        <b>Instructions:</b> <br/>\r\n        1) Input pinyin. (e.g. type \"wo\" for 我) <br/>\r\n        2) Select from the displayed list by pressing on the corresponding number (e.g. 0 for 我) <br/>\r\n        <b className=\"redtitle\">Disclaimer:</b> Options beyond number 9 are unselectable for now.\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\User\\Documents\\GitHub\\read-chinese\\src\\components\\Groupbar.js",[],"C:\\Users\\User\\Documents\\GitHub\\read-chinese\\src\\components\\CharacterTooltip.js",["91"],"import React from \"react\";\r\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\n\r\nconst LightTooltip = withStyles((theme) => ({\r\n  tooltip: {\r\n    backgroundColor: \"#656565\",\r\n    color: \"#e5e5e5\",\r\n    boxShadow: theme.shadows[1],\r\n    fontSize: 20,\r\n  },\r\n}))(Tooltip);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    size: 20,\r\n  },\r\n}));\r\n\r\nexport default function CustomizedTooltips(props) {\r\n  const { chinese } = props;\r\n  return (\r\n    <LightTooltip\r\n      title={\r\n        <div>\r\n          {\"pinyin: \" + chinese.pinyin} <br /> {\"meaning: \" + chinese.meaning}\r\n        </div>\r\n      }\r\n    >\r\n      <Button style={{ fontSize: \"25px\", color: \"#949494\" }}>\r\n        {chinese.character}\r\n      </Button>\r\n    </LightTooltip>\r\n  );\r\n}\r\n","C:\\Users\\User\\Documents\\GitHub\\read-chinese\\src\\components\\TypeAssist.js",[],"C:\\Users\\User\\Documents\\GitHub\\read-chinese\\src\\components\\ReferenceTable.js",[],"C:\\Users\\User\\Documents\\GitHub\\read-chinese\\src\\components\\SelectionTable.js",[],"C:\\Users\\User\\Documents\\GitHub\\read-chinese\\src\\data\\chinesedata.js",[],"C:\\Users\\User\\Documents\\GitHub\\read-chinese\\src\\helpers\\chineseAPI.js",[],"C:\\Users\\User\\Documents\\GitHub\\read-chinese\\src\\components\\GroupbarElement.js",[],"C:\\Users\\User\\Documents\\GitHub\\read-chinese\\src\\components\\SetElement.js",[],{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":11,"column":8,"nodeType":"98","messageId":"99","endLine":11,"endColumn":13},{"ruleId":"96","severity":1,"message":"97","line":3,"column":8,"nodeType":"98","messageId":"99","endLine":3,"endColumn":13},{"ruleId":"96","severity":1,"message":"100","line":2,"column":8,"nodeType":"98","messageId":"99","endLine":2,"endColumn":22},{"ruleId":"96","severity":1,"message":"101","line":3,"column":10,"nodeType":"98","messageId":"99","endLine":3,"endColumn":20},{"ruleId":"102","severity":1,"message":"103","line":98,"column":6,"nodeType":"104","endLine":98,"endColumn":15,"suggestions":"105"},{"ruleId":"96","severity":1,"message":"97","line":10,"column":8,"nodeType":"98","messageId":"99","endLine":10,"endColumn":13},{"ruleId":"102","severity":1,"message":"106","line":147,"column":6,"nodeType":"104","endLine":147,"endColumn":18,"suggestions":"107"},{"ruleId":"102","severity":1,"message":"108","line":188,"column":6,"nodeType":"104","endLine":188,"endColumn":15,"suggestions":"109"},{"ruleId":"96","severity":1,"message":"110","line":15,"column":7,"nodeType":"98","messageId":"99","endLine":15,"endColumn":16},"no-native-reassign",["111"],"no-negated-in-lhs",["112"],"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","'SelectionTable' is defined but never used.","'chineseAPI' is defined but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'page'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setCharacterTooltip' needs the current value of 'page'.","ArrayExpression",["113"],"React Hook useEffect has a missing dependency: 'chinese.chinese'. Either include it or remove the dependency array.",["114"],"React Hook React.useEffect has a missing dependency: 'organiseDisplay'. Either include it or remove the dependency array.",["115"],"'useStyles' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"116","fix":"117"},{"desc":"118","fix":"119"},{"desc":"120","fix":"121"},"Update the dependencies array to be: [page, tooltip]",{"range":"122","text":"123"},"Update the dependencies array to be: [chinese.chinese, inputValue]",{"range":"124","text":"125"},"Update the dependencies array to be: [divList, organiseDisplay]",{"range":"126","text":"127"},[2686,2695],"[page, tooltip]",[3768,3780],"[chinese.chinese, inputValue]",[4870,4879],"[divList, organiseDisplay]"]