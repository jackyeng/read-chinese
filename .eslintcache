[{"/Users/Jacky/Documents/GitHub/read-chinese/src/index.js":"1","/Users/Jacky/Documents/GitHub/read-chinese/src/App.js":"2","/Users/Jacky/Documents/GitHub/read-chinese/src/reportWebVitals.js":"3","/Users/Jacky/Documents/GitHub/read-chinese/src/components/Groupbar.js":"4","/Users/Jacky/Documents/GitHub/read-chinese/src/components/GroupbarElement.js":"5","/Users/Jacky/Documents/GitHub/read-chinese/src/components/SetElement.js":"6","/Users/Jacky/Documents/GitHub/read-chinese/src/components/TypeAssist.js":"7","/Users/Jacky/Documents/GitHub/read-chinese/src/page/Test.js":"8","/Users/Jacky/Documents/GitHub/read-chinese/src/page/Characters.js":"9","/Users/Jacky/Documents/GitHub/read-chinese/src/page/Practice.js":"10","/Users/Jacky/Documents/GitHub/read-chinese/src/page/Navbar.js":"11","/Users/Jacky/Documents/GitHub/read-chinese/src/page/Typer.js":"12","/Users/Jacky/Documents/GitHub/read-chinese/src/page/About.js":"13"},{"size":500,"mtime":1608004129061,"results":"14","hashOfConfig":"15"},{"size":986,"mtime":1609308874454,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":1608004129069,"results":"17","hashOfConfig":"15"},{"size":2091,"mtime":1609322937397,"results":"18","hashOfConfig":"15"},{"size":1790,"mtime":1609322758611,"results":"19","hashOfConfig":"15"},{"size":1341,"mtime":1609322651715,"results":"20","hashOfConfig":"15"},{"size":4835,"mtime":1609253715851,"results":"21","hashOfConfig":"15"},{"size":4579,"mtime":1609254014569,"results":"22","hashOfConfig":"15"},{"size":109,"mtime":1609254029019,"results":"23","hashOfConfig":"15"},{"size":4187,"mtime":1609331994303,"results":"24","hashOfConfig":"15"},{"size":948,"mtime":1609254084999,"results":"25","hashOfConfig":"15"},{"size":5889,"mtime":1609253993148,"results":"26","hashOfConfig":"15"},{"size":132,"mtime":1609254150645,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"ftj0oy",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"30"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"/Users/Jacky/Documents/GitHub/read-chinese/src/index.js",[],["59","60"],"/Users/Jacky/Documents/GitHub/read-chinese/src/App.js",[],"/Users/Jacky/Documents/GitHub/read-chinese/src/reportWebVitals.js",[],"/Users/Jacky/Documents/GitHub/read-chinese/src/components/Groupbar.js",["61"],"import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport ListSubheader from \"@material-ui/core/ListSubheader\";\nimport List from \"@material-ui/core/List\";\nimport GroupbarElement from \"./GroupbarElement\";\nimport { borders } from '@material-ui/system';\nimport './../index.css';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    maxWidth: 360,\n    backgroundColor: \"transparent\",\n    color: \"white\",\n  },\n  nested: {\n    paddingLeft: theme.spacing(4),\n  },\n  title: {\n    color: \"#949494\",\n    fontFamily: \"Quicksand\", // \"Noto Sans SC\",\n    fontSize: 16,\n    boxShadow: 10,\n    backgroundImage: 'url(./../fonts/logo.png',\n    borderColor: 'white',\n    border: 1,\n    \n    \n  },\n}));\n\nexport default function Groupbar(props) {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState([0, 0, 0, 0, 0]);\n\n  const { selectSet } = props;\n  const handleClick = (e) => {\n    const temp = new Array(open.length)\n      .fill()\n      .map((_, index) => (index === e ? (open[e] ? 0 : 1) : 0));\n\n    setOpen(temp);\n  };\n\n  return (\n    <List\n      component=\"nav\"\n      aria-labelledby=\"nested-list-subheader\"\n      subheader={\n        <ListSubheader component=\"div\" id=\"nested-list-subheader\">\n          <div className={classes.title}>PRACTICE GROUPS</div>\n        </ListSubheader>\n      }\n      className={classes.root}\n    >\n      <GroupbarElement\n        open={open[0]}\n        index={0}\n        handleClick={handleClick}\n        selectSet={selectSet}\n      />\n      <GroupbarElement\n        open={open[1]}\n        index={1}\n        handleClick={handleClick}\n        selectSet={selectSet}\n      />\n      <GroupbarElement\n        open={open[2]}\n        index={2}\n        handleClick={handleClick}\n        selectSet={selectSet}\n      />\n      <GroupbarElement\n        open={open[3]}\n        index={3}\n        handleClick={handleClick}\n        selectSet={selectSet}\n      />\n      <GroupbarElement\n        open={open[4]}\n        index={4}\n        handleClick={handleClick}\n        selectSet={selectSet}\n      />\n    </List>\n  );\n}\n","/Users/Jacky/Documents/GitHub/read-chinese/src/components/GroupbarElement.js",[],"/Users/Jacky/Documents/GitHub/read-chinese/src/components/SetElement.js",[],"/Users/Jacky/Documents/GitHub/read-chinese/src/components/TypeAssist.js",["62"],"import React from \"react\";\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport { makeStyles, ThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\nimport TextField from '@material-ui/core/TextField';\n\nimport { red } from \"@material-ui/core/colors\";\n\nfunction Alert(props) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n  }\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      '& > *': {\n        margin: theme.spacing(1),\n        width: '5',\n      },\n    \n    },\n    alertRoot: {\n        width: '100%',\n        '& > * + *': {\n          marginTop: theme.spacing(2),\n        },\n      },\n    TextField: {\n        color: \"white\",\n        fontSize: \"18px\",\n        borderColor: 'white',\n    },\n    underline: {\n        color: 'red' ,\n        '&::after': {\n          border: '2px solid red'\n        }\n      }\n\n  }));\n\n/**\n * Shuffles array in place. ES6 version\n * @param {Array} a items An array containing the items.\n */\nfunction shuffle(a) {\n    for (let i = a.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [a[i], a[j]] = [a[j], a[i]];\n    }\n    return a;\n}\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: red,\n  },\n});\n\nexport default function TypeAssist(props){\n    const {practice} = props;\n    const [selectedCharacter, setSelectedCharacter] = React.useState(0);\n    const [boolean, setBoolean] = React.useState(true);\n    const [inputValue, setInputValue] = React.useState(\"\");\n    const classes = useStyles();\n\n    const [answer, setAnswer] = React.useState([]);\n    const [openCorrect, setOpenCorrect] = React.useState(false);\n    const [openWrong, setOpenWrong] = React.useState(false);\n    const [chinese, setChinese] = React.useState(practice);\n    \n    const handleClick = () => {\n        handleClose();\n        if (inputValue === chinese.chinese[selectedCharacter].pinyinWithoutTone){\n            setOpenCorrect(true);\n        }\n        else {\n            setOpenWrong(true);\n        }\n    };\n\n\n    const handleClose = (event, reason) => {\n        if (reason === 'clickaway') {\n        return;\n        }\n        setOpenCorrect(false);\n        setOpenWrong(false);\n    };\n\n    //Update value of input text field\n    const handleChange = (e) => {\n        e.preventDefault();\n        setInputValue(e.target.value);\n    };\n  \n    //Handle users submit enter\n    const handleKeyDown = (e) => {\n        if (e.keyCode === 13){\n            e.preventDefault();\n            const previousChinese = chinese.chinese[selectedCharacter];\n            setAnswer([previousChinese.pinyin, inputValue, previousChinese.character, previousChinese.meaning]);\n            setSelectedCharacter((selectedCharacter + 1 < chinese.chinese.length ) ? selectedCharacter + 1 : 0);\n            handleClick();\n\n            setInputValue(\"\");\n         }\n    };\n\n    React.useEffect(() =>{ \n        const shuffled = shuffle(practice.chinese)\n        setChinese({chinese:shuffled});\n        \n    }, [practice]);\n    /*React.useEffect(() => { // post chinese characters to mongodb\n        var i;\n        for (i = 0; i < 100; i++){\n            axios.post('http://localhost:5000/chinese/add', chinese[i])\n        }   \n            \n      }, []);*/\n   \n    return(\n        <div>\n            <h1>\n                {chinese.chinese[selectedCharacter] ? chinese.chinese[selectedCharacter].character : \"\"}\n            </h1>\n            <form className={classes.root} noValidate autoComplete=\"off\">\n                <ThemeProvider theme={theme}>\n                  {boolean && <TextField value={inputValue} id=\"standard-basic\" onChange={handleChange} onKeyDown={handleKeyDown} label=\"\" inputProps={{ underline: classes.underline, className: classes.TextField, min: 0, style: { textAlign: 'center' }}} />}\n                </ThemeProvider>\n            </form>\n            <div className={classes.alertRoot}>\n                <Snackbar anchorOrigin={{vertical:'center', horizontal:'center'}} open={openCorrect} onClose={handleClose}>\n                    <Alert onClose={handleClose} severity=\"success\">\n                        Correct: {answer[2]} - {answer[0]}\n                        <br/>\n                        Meaning: {answer[3]}\n                        \n                    </Alert>\n                </Snackbar>\n                <Snackbar anchorOrigin={{vertical:'center', horizontal:'center'}} open={openWrong} onClose={handleClose}>\n                    <Alert onClose={handleClose} severity=\"error\">\n                        Your answer: {answer[1]}\n                        <br/>\n                        Correct answer: {answer[2]} - {answer[0]}\n                        <br/>\n                        Meaning: {answer[3]}\n                    </Alert>\n                </Snackbar>\n            </div>\n        </div>\n    );\n}\n\n\n\n\n","/Users/Jacky/Documents/GitHub/read-chinese/src/page/Test.js",["63"],"import React from \"react\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\nimport {\n  makeStyles,\n  ThemeProvider,\n  createMuiTheme,\n} from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport axios from \"axios\";\nimport { red } from \"@material-ui/core/colors\";\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n      width: \"5\",\n    },\n  },\n  alertRoot: {\n    width: \"100%\",\n    \"& > * + *\": {\n      marginTop: theme.spacing(2),\n    },\n  },\n  TextField: {\n    color: \"white\",\n    fontSize: \"18px\",\n    borderColor: \"white\",\n  },\n  underline: {\n    color: \"red\",\n    \"&::after\": {\n      border: \"2px solid red\",\n    },\n  },\n}));\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: red,\n  },\n});\n\nexport default function Test() {\n  const [selectedCharacter, setSelectedCharacter] = React.useState(0);\n  const [boolean, setBoolean] = React.useState(true);\n  const [inputValue, setInputValue] = React.useState(\"\");\n  const classes = useStyles();\n\n  const [answer, setAnswer] = React.useState([]);\n  const [openCorrect, setOpenCorrect] = React.useState(false);\n  const [openWrong, setOpenWrong] = React.useState(false);\n  const [chinese, setChinese] = React.useState({ chinese: [] });\n\n  const handleClick = () => {\n    handleClose();\n    if (inputValue === chinese.chinese[selectedCharacter].pinyinWithoutTone) {\n      setOpenCorrect(true);\n    } else {\n      setOpenWrong(true);\n    }\n  };\n\n  const handleClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setOpenCorrect(false);\n    setOpenWrong(false);\n  };\n\n  //Update value of input text field\n  const handleChange = (e) => {\n    e.preventDefault();\n    setInputValue(e.target.value);\n  };\n\n  //Handle users submit enter\n  const handleKeyDown = (e) => {\n    if (e.keyCode === 13) {\n      e.preventDefault();\n      const previousChinese = chinese.chinese[selectedCharacter];\n      setAnswer([\n        previousChinese.pinyin,\n        inputValue,\n        previousChinese.character,\n        previousChinese.meaning,\n      ]);\n      setSelectedCharacter(\n        selectedCharacter + 1 < chinese.chinese.length\n          ? selectedCharacter + 1\n          : 0\n      );\n      handleClick();\n\n      setInputValue(\"\");\n      console.log(chinese.chinese[selectedCharacter].character);\n    }\n  };\n\n  React.useEffect(() => {\n    axios\n      .get(\"http://localhost:5000/chinese/\")\n      .then((response) => {\n        setChinese({ chinese: response.data });\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }, []);\n  /*React.useEffect(() => { // post chinese characters to mongodb\n        var i;\n        for (i = 0; i < 100; i++){\n            axios.post('http://localhost:5000/chinese/add', chinese[i])\n        }   \n            \n      }, []);*/\n\n  return (\n    <div>\n      <h1>\n        {chinese.chinese[selectedCharacter]\n          ? chinese.chinese[selectedCharacter].character\n          : \"\"}\n      </h1>\n      <form className={classes.root} noValidate autoComplete=\"off\">\n        <ThemeProvider theme={theme}>\n          {boolean && (\n            <TextField\n              value={inputValue}\n              id=\"standard-basic\"\n              onChange={handleChange}\n              onKeyDown={handleKeyDown}\n              label=\"\"\n              inputProps={{\n                underline: classes.underline,\n                className: classes.TextField,\n                min: 0,\n                style: { textAlign: \"center\" },\n              }}\n            />\n          )}\n        </ThemeProvider>\n      </form>\n      <div className={classes.alertRoot}>\n        <Snackbar\n          anchorOrigin={{ vertical: \"center\", horizontal: \"center\" }}\n          open={openCorrect}\n          onClose={handleClose}\n        >\n          <Alert onClose={handleClose} severity=\"success\">\n            Correct: {answer[2]} - {answer[0]}\n            <br />\n            Meaning: {answer[3]}\n          </Alert>\n        </Snackbar>\n        <Snackbar\n          anchorOrigin={{ vertical: \"center\", horizontal: \"center\" }}\n          open={openWrong}\n          onClose={handleClose}\n        >\n          <Alert onClose={handleClose} severity=\"error\">\n            Your answer: {answer[1]}\n            <br />\n            Correct answer: {answer[2]} - {answer[0]}\n            <br />\n            Meaning: {answer[3]}\n          </Alert>\n        </Snackbar>\n      </div>\n    </div>\n  );\n}\n","/Users/Jacky/Documents/GitHub/read-chinese/src/page/Characters.js",[],"/Users/Jacky/Documents/GitHub/read-chinese/src/page/Practice.js",["64"],"/Users/Jacky/Documents/GitHub/read-chinese/src/page/Navbar.js",[],"/Users/Jacky/Documents/GitHub/read-chinese/src/page/Typer.js",["65","66","67"],"import React,{useEffect} from \"react\";\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { makeStyles, ThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\nimport TextField from '@material-ui/core/TextField';\nimport axios from 'axios';\nimport { red } from \"@material-ui/core/colors\";\nimport \"./../index.css\";\nimport BackspaceIcon from '@material-ui/icons/Backspace';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      '& > *': {\n        margin: theme.spacing(1),\n        width: '5',\n      },\n    \n    },\n    alertRoot: {\n        width: '100%',\n        '& > * + *': {\n          marginTop: theme.spacing(2),\n        },\n      },\n    TextField: {\n        color: \"white\",\n        fontSize: \"18px\",\n    },\n    underline: {\n        color: 'red' ,\n        '&::after': {\n          border: '2px solid red'\n        }\n      },\n      root2: {\n        flexGrow: 1,\n        fontSize: 15,\n        marginTop: 40,\n      },\n      paper: {\n        padding: theme.spacing(1),\n        textAlign: 'center',\n        color: 'white',\n        backgroundColor: 'transparent',\n        boxShadow: 'none',  \n        justify: 'center',\n        height: 194,\n      },\n      control: {\n        padding: theme.spacing(2),\n      },\n\n  }));\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: red,\n  },\n});\n\nexport default function Test(){\n    const [selectedCharacter, setSelectedCharacter] = React.useState(0);\n    const [boolean, setBoolean] = React.useState(true);\n    const [inputValue, setInputValue] = React.useState(\"\");\n    const [divList, setDivList] = React.useState([]);\n    const [selectList, setSelectList] = React.useState([]);\n    const [chinese, setChinese] = React.useState({chinese:[]});\n    const [result, setResult] = React.useState(\"\");\n    const classes = useStyles();\n\n\n    //Update value of input text field\n    const handleChange = (e) => {\n        e.preventDefault();\n        \n        setInputValue(e.target.value);\n        \n        \n        \n    };\n\n    function isNumber(n) { return !isNaN(parseFloat(n)) && !isNaN(n - 0) }\n\n    const handleResult = (e) => {\n        if (e < divList.length){\n            setResult(result + selectList[e]);\n            setInputValue(\"\");\n        }\n\n    };\n\n    const handleClear = () => {\n        setResult(\"\");\n    }\n\n    const handleDelete = () => {\n        setResult(result.slice(0,-1));\n    }\n    //Handle users submit enter\n    const handleKeyDown = (e) => {\n        if (isNumber(String.fromCharCode(e.keyCode)) && divList.length>0){\n            handleResult(e.keyCode-48);\n        }\n        \n        if (e.keyCode === 13){  \n            e.preventDefault();\n           \n            setSelectedCharacter((selectedCharacter + 1 < chinese.chinese.length ) ? selectedCharacter + 1 : 0);\n\n            setInputValue(\"\");\n            setDivList([]);\n         }\n    };\n    \n    useEffect(() => {\n        if (Number(inputValue) || inputValue === '0'){\n            setInputValue(\"\");\n        }\n\n        if (inputValue){\n            const filtered = (chinese.chinese.filter(el => el.pinyinWithoutTone === inputValue));\n            const divList = [];\n            const selectList = [];\n            for (var i = 0 ; i < filtered.length ; i++){\n                divList.push(<div className=\"result\">{String(i) + \" - \" + (filtered[i].character + \": \" + filtered[i].meaning)}</div>);\n                \n                selectList.push(filtered[i].character);\n            }\n            setDivList(divList);\n            setSelectList(selectList);\n        }\n        \n      }, [inputValue]);\n\n      const [display, setDisplay] = React.useState(<Paper className={classes.paper}/>);\n\n\n      const organiseDisplay = () => {\n        setDisplay(<Paper className={classes.paper}/>);\n        if (divList.length > 0){\n            var display = [];\n            var temp = [...divList]\n            const result = new Array(Math.ceil(temp.length / 6))\n                        .fill()\n                        .map(_ => temp.splice(0, 6))\n                    \n            for ( var i = 0 ; i < Math.ceil(divList.length/6) ; i++){\n            display.push(\n               <Grid  key={i} item>\n                <Paper className={classes.paper}>\n                  {result[i]}\n                </Paper>\n              </Grid>)\n            }\n           setDisplay(display);\n        }\n     }\n\n    React.useEffect(() =>{ \n        axios.get('http://localhost:5000/chinese/')\n      .then(response => {\n        setChinese({ chinese: response.data })\n      })\n      .catch((error) => {\n        console.log(error);\n      })\n        \n    }, []);\n   \n    React.useEffect(() =>{ \n        organiseDisplay();\n    }, [divList]);\n   \n    return(\n        <div>\n            \n            <Grid container className={classes.root2} spacing={2}>\n                <Grid item xs={12}>\n                    <Grid container justify=\"center\" spacing={2}>\n                        {display}    \n                    </Grid>\n                </Grid>\n            </Grid>\n            \n            <form className={classes.root} noValidate autoComplete=\"off\">\n                <ThemeProvider theme={theme}>\n                  {boolean && <TextField value={inputValue} id=\"standard-basic\" onChange={handleChange} onKeyDown={handleKeyDown} label=\"\" inputProps={{ underline: classes.underline, className: classes.TextField, min: 0, style: { textAlign: 'center' }}} />}\n                </ThemeProvider>\n            </form>\n            <IconButton onClick={()=>handleDelete()} >\n                    <BackspaceIcon />\n            </IconButton>\n            <IconButton onClick={()=>handleClear()} >\n                    <DeleteIcon />\n            </IconButton>\n            <div className=\"result2\">\n                {result}\n            </div>\n        </div>\n    );\n}\n\n","/Users/Jacky/Documents/GitHub/read-chinese/src/page/About.js",[],{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":6,"column":10,"nodeType":"74","messageId":"75","endLine":6,"endColumn":17},{"ruleId":"72","severity":1,"message":"76","line":62,"column":21,"nodeType":"74","messageId":"75","endLine":62,"endColumn":31},{"ruleId":"72","severity":1,"message":"76","line":51,"column":19,"nodeType":"74","messageId":"75","endLine":51,"endColumn":29},{"ruleId":"72","severity":1,"message":"77","line":9,"column":8,"nodeType":"74","messageId":"75","endLine":9,"endColumn":24},{"ruleId":"72","severity":1,"message":"76","line":65,"column":21,"nodeType":"74","messageId":"75","endLine":65,"endColumn":31},{"ruleId":"78","severity":1,"message":"79","line":135,"column":10,"nodeType":"80","endLine":135,"endColumn":22,"suggestions":"81"},{"ruleId":"78","severity":1,"message":"82","line":174,"column":8,"nodeType":"80","endLine":174,"endColumn":17,"suggestions":"83"},"no-native-reassign",["84"],"no-negated-in-lhs",["85"],"no-unused-vars","'borders' is defined but never used.","Identifier","unusedVar","'setBoolean' is assigned a value but never used.","'CircularProgress' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'chinese.chinese'. Either include it or remove the dependency array.","ArrayExpression",["86"],"React Hook React.useEffect has a missing dependency: 'organiseDisplay'. Either include it or remove the dependency array.",["87"],"no-global-assign","no-unsafe-negation",{"desc":"88","fix":"89"},{"desc":"90","fix":"91"},"Update the dependencies array to be: [chinese.chinese, inputValue]",{"range":"92","text":"93"},"Update the dependencies array to be: [divList, organiseDisplay]",{"range":"94","text":"95"},[3664,3676],"[chinese.chinese, inputValue]",[4770,4779],"[divList, organiseDisplay]"]